// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

var w, d, j, b, R, z, F, N = {}, q = [], re = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function k(e, t) {
    for(var _ in t)e[_] = t[_];
    return e;
}
function J(e) {
    var t = e.parentNode;
    t && t.removeChild(e);
}
function oe(e, t, _) {
    var o, l, r, s = {};
    for(r in t)r == "key" ? o = t[r] : r == "ref" ? l = t[r] : s[r] = t[r];
    if (arguments.length > 2 && (s.children = arguments.length > 3 ? w.call(arguments, 2) : _), typeof e == "function" && e.defaultProps != null) for(r in e.defaultProps)s[r] === void 0 && (s[r] = e.defaultProps[r]);
    return P(e, s, o, l, null);
}
function P(e, t, _, o, l) {
    var r = {
        type: e,
        props: t,
        key: _,
        ref: o,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: l ?? ++j
    };
    return l == null && d.vnode != null && d.vnode(r), r;
}
function W(e) {
    return e.children;
}
function T(e, t) {
    this.props = e, this.context = t;
}
function S(e, t) {
    if (t == null) return e.__ ? S(e.__, e.__.__k.indexOf(e) + 1) : null;
    for(var _; t < e.__k.length; t++)if ((_ = e.__k[t]) != null && _.__e != null) return _.__e;
    return typeof e.type == "function" ? S(e) : null;
}
function K(e) {
    var t, _;
    if ((e = e.__) != null && e.__c != null) {
        for(e.__e = e.__c.base = null, t = 0; t < e.__k.length; t++)if ((_ = e.__k[t]) != null && _.__e != null) {
            e.__e = e.__c.base = _.__e;
            break;
        }
        return K(e);
    }
}
function H(e) {
    (!e.__d && (e.__d = !0) && b.push(e) && !L.__r++ || R !== d.debounceRendering) && ((R = d.debounceRendering) || z)(L);
}
function L() {
    var e, t, _, o, l, r, s, f;
    for(b.sort(F); e = b.shift();)e.__d && (t = b.length, o = void 0, l = void 0, s = (r = (_ = e).__v).__e, (f = _.__P) && (o = [], (l = k({}, r)).__v = r.__v + 1, I(f, r, l, _.__n, f.ownerSVGElement !== void 0, r.__h != null ? [
        s
    ] : null, o, s ?? S(r), r.__h), ee(o, r), r.__e != s && K(r)), b.length > t && b.sort(F));
    L.__r = 0;
}
function Q(e, t, _, o, l, r, s, f, p, a) {
    var n, h, u, i, c, x, v, y = o && o.__k || q, g = y.length;
    for(_.__k = [], n = 0; n < t.length; n++)if ((i = _.__k[n] = (i = t[n]) == null || typeof i == "boolean" || typeof i == "function" ? null : typeof i == "string" || typeof i == "number" || typeof i == "bigint" ? P(null, i, null, null, i) : Array.isArray(i) ? P(W, {
        children: i
    }, null, null, null) : i.__b > 0 ? P(i.type, i.props, i.key, i.ref ? i.ref : null, i.__v) : i) != null) {
        if (i.__ = _, i.__b = _.__b + 1, (u = y[n]) === null || u && i.key == u.key && i.type === u.type) y[n] = void 0;
        else for(h = 0; h < g; h++){
            if ((u = y[h]) && i.key == u.key && i.type === u.type) {
                y[h] = void 0;
                break;
            }
            u = null;
        }
        I(e, i, u = u || N, l, r, s, f, p, a), c = i.__e, (h = i.ref) && u.ref != h && (v || (v = []), u.ref && v.push(u.ref, null, i), v.push(h, i.__c || c, i)), c != null ? (x == null && (x = c), typeof i.type == "function" && i.__k === u.__k ? i.__d = p = X(i, p, e) : p = Y(e, i, u, y, c, p), typeof _.type == "function" && (_.__d = p)) : p && u.__e == p && p.parentNode != e && (p = S(u));
    }
    for(_.__e = x, n = g; n--;)y[n] != null && (typeof _.type == "function" && y[n].__e != null && y[n].__e == _.__d && (_.__d = Z(o).nextSibling), _e(y[n], y[n]));
    if (v) for(n = 0; n < v.length; n++)te(v[n], v[++n], v[++n]);
}
function X(e, t, _) {
    for(var o, l = e.__k, r = 0; l && r < l.length; r++)(o = l[r]) && (o.__ = e, t = typeof o.type == "function" ? X(o, t, _) : Y(_, o, o, l, o.__e, t));
    return t;
}
function Y(e, t, _, o, l, r) {
    var s, f, p;
    if (t.__d !== void 0) s = t.__d, t.__d = void 0;
    else if (_ == null || l != r || l.parentNode == null) e: if (r == null || r.parentNode !== e) e.appendChild(l), s = null;
    else {
        for(f = r, p = 0; (f = f.nextSibling) && p < o.length; p += 1)if (f == l) break e;
        e.insertBefore(l, r), s = r;
    }
    return s !== void 0 ? s : l.nextSibling;
}
function Z(e) {
    var t, _, o;
    if (e.type == null || typeof e.type == "string") return e.__e;
    if (e.__k) {
        for(t = e.__k.length - 1; t >= 0; t--)if ((_ = e.__k[t]) && (o = Z(_))) return o;
    }
    return null;
}
function ie(e, t, _, o, l) {
    var r;
    for(r in _)r === "children" || r === "key" || r in t || M(e, r, null, _[r], o);
    for(r in t)l && typeof t[r] != "function" || r === "children" || r === "key" || r === "value" || r === "checked" || _[r] === t[r] || M(e, r, t[r], _[r], o);
}
function $(e, t, _) {
    t[0] === "-" ? e.setProperty(t, _ ?? "") : e[t] = _ == null ? "" : typeof _ != "number" || re.test(t) ? _ : _ + "px";
}
function M(e, t, _, o, l) {
    var r;
    e: if (t === "style") if (typeof _ == "string") e.style.cssText = _;
    else {
        if (typeof o == "string" && (e.style.cssText = o = ""), o) for(t in o)_ && t in _ || $(e.style, t, "");
        if (_) for(t in _)o && _[t] === o[t] || $(e.style, t, _[t]);
    }
    else if (t[0] === "o" && t[1] === "n") r = t !== (t = t.replace(/Capture$/, "")), t = t.toLowerCase() in e ? t.toLowerCase().slice(2) : t.slice(2), e.l || (e.l = {}), e.l[t + r] = _, _ ? o || e.addEventListener(t, r ? V : B, r) : e.removeEventListener(t, r ? V : B, r);
    else if (t !== "dangerouslySetInnerHTML") {
        if (l) t = t.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if (t !== "width" && t !== "height" && t !== "href" && t !== "list" && t !== "form" && t !== "tabIndex" && t !== "download" && t in e) try {
            e[t] = _ ?? "";
            break e;
        } catch  {}
        typeof _ == "function" || (_ == null || _ === !1 && t.indexOf("-") == -1 ? e.removeAttribute(t) : e.setAttribute(t, _));
    }
}
function B(e) {
    return this.l[e.type + !1](d.event ? d.event(e) : e);
}
function V(e) {
    return this.l[e.type + !0](d.event ? d.event(e) : e);
}
function I(e, t, _, o, l, r, s, f, p) {
    var a, n, h, u, i, c, x, v, y, g, E, C, O, A, U, m = t.type;
    if (t.constructor !== void 0) return null;
    _.__h != null && (p = _.__h, f = t.__e = _.__e, t.__h = null, r = [
        f
    ]), (a = d.__b) && a(t);
    try {
        e: if (typeof m == "function") {
            if (v = t.props, y = (a = m.contextType) && o[a.__c], g = a ? y ? y.props.value : a.__ : o, _.__c ? x = (n = t.__c = _.__c).__ = n.__E : ("prototype" in m && m.prototype.render ? t.__c = n = new m(v, g) : (t.__c = n = new T(v, g), n.constructor = m, n.render = ue), y && y.sub(n), n.props = v, n.state || (n.state = {}), n.context = g, n.__n = o, h = n.__d = !0, n.__h = [], n._sb = []), n.__s == null && (n.__s = n.state), m.getDerivedStateFromProps != null && (n.__s == n.state && (n.__s = k({}, n.__s)), k(n.__s, m.getDerivedStateFromProps(v, n.__s))), u = n.props, i = n.state, n.__v = t, h) m.getDerivedStateFromProps == null && n.componentWillMount != null && n.componentWillMount(), n.componentDidMount != null && n.__h.push(n.componentDidMount);
            else {
                if (m.getDerivedStateFromProps == null && v !== u && n.componentWillReceiveProps != null && n.componentWillReceiveProps(v, g), !n.__e && n.shouldComponentUpdate != null && n.shouldComponentUpdate(v, n.__s, g) === !1 || t.__v === _.__v) {
                    for(t.__v !== _.__v && (n.props = v, n.state = n.__s, n.__d = !1), n.__e = !1, t.__e = _.__e, t.__k = _.__k, t.__k.forEach(function(D) {
                        D && (D.__ = t);
                    }), E = 0; E < n._sb.length; E++)n.__h.push(n._sb[E]);
                    n._sb = [], n.__h.length && s.push(n);
                    break e;
                }
                n.componentWillUpdate != null && n.componentWillUpdate(v, n.__s, g), n.componentDidUpdate != null && n.__h.push(function() {
                    n.componentDidUpdate(u, i, c);
                });
            }
            if (n.context = g, n.props = v, n.__P = e, C = d.__r, O = 0, "prototype" in m && m.prototype.render) {
                for(n.state = n.__s, n.__d = !1, C && C(t), a = n.render(n.props, n.state, n.context), A = 0; A < n._sb.length; A++)n.__h.push(n._sb[A]);
                n._sb = [];
            } else do n.__d = !1, C && C(t), a = n.render(n.props, n.state, n.context), n.state = n.__s;
            while (n.__d && ++O < 25)
            n.state = n.__s, n.getChildContext != null && (o = k(k({}, o), n.getChildContext())), h || n.getSnapshotBeforeUpdate == null || (c = n.getSnapshotBeforeUpdate(u, i)), U = a != null && a.type === W && a.key == null ? a.props.children : a, Q(e, Array.isArray(U) ? U : [
                U
            ], t, _, o, l, r, s, f, p), n.base = t.__e, t.__h = null, n.__h.length && s.push(n), x && (n.__E = n.__ = null), n.__e = !1;
        } else r == null && t.__v === _.__v ? (t.__k = _.__k, t.__e = _.__e) : t.__e = se(_.__e, t, _, o, l, r, s, p);
        (a = d.diffed) && a(t);
    } catch (D) {
        t.__v = null, (p || r != null) && (t.__e = f, t.__h = !!p, r[r.indexOf(f)] = null), d.__e(D, t, _);
    }
}
function ee(e, t) {
    d.__c && d.__c(t, e), e.some(function(_) {
        try {
            e = _.__h, _.__h = [], e.some(function(o) {
                o.call(_);
            });
        } catch (o) {
            d.__e(o, _.__v);
        }
    });
}
function se(e, t, _, o, l, r, s, f) {
    var p, a, n, h = _.props, u = t.props, i = t.type, c = 0;
    if (i === "svg" && (l = !0), r != null) {
        for(; c < r.length; c++)if ((p = r[c]) && "setAttribute" in p == !!i && (i ? p.localName === i : p.nodeType === 3)) {
            e = p, r[c] = null;
            break;
        }
    }
    if (e == null) {
        if (i === null) return document.createTextNode(u);
        e = l ? document.createElementNS("http://www.w3.org/2000/svg", i) : document.createElement(i, u.is && u), r = null, f = !1;
    }
    if (i === null) h === u || f && e.data === u || (e.data = u);
    else {
        if (r = r && w.call(e.childNodes), a = (h = _.props || N).dangerouslySetInnerHTML, n = u.dangerouslySetInnerHTML, !f) {
            if (r != null) for(h = {}, c = 0; c < e.attributes.length; c++)h[e.attributes[c].name] = e.attributes[c].value;
            (n || a) && (n && (a && n.__html == a.__html || n.__html === e.innerHTML) || (e.innerHTML = n && n.__html || ""));
        }
        if (ie(e, u, h, l, f), n) t.__k = [];
        else if (c = t.props.children, Q(e, Array.isArray(c) ? c : [
            c
        ], t, _, o, l && i !== "foreignObject", r, s, r ? r[0] : _.__k && S(_, 0), f), r != null) for(c = r.length; c--;)r[c] != null && J(r[c]);
        f || ("value" in u && (c = u.value) !== void 0 && (c !== e.value || i === "progress" && !c || i === "option" && c !== h.value) && M(e, "value", c, h.value, !1), "checked" in u && (c = u.checked) !== void 0 && c !== e.checked && M(e, "checked", c, h.checked, !1));
    }
    return e;
}
function te(e, t, _) {
    try {
        typeof e == "function" ? e(t) : e.current = t;
    } catch (o) {
        d.__e(o, _);
    }
}
function _e(e, t, _) {
    var o, l;
    if (d.unmount && d.unmount(e), (o = e.ref) && (o.current && o.current !== e.__e || te(o, null, t)), (o = e.__c) != null) {
        if (o.componentWillUnmount) try {
            o.componentWillUnmount();
        } catch (r) {
            d.__e(r, t);
        }
        o.base = o.__P = null, e.__c = void 0;
    }
    if (o = e.__k) for(l = 0; l < o.length; l++)o[l] && _e(o[l], t, _ || typeof e.type != "function");
    _ || e.__e == null || J(e.__e), e.__ = e.__e = e.__d = void 0;
}
function ue(e, t, _) {
    return this.constructor(e, _);
}
function ce(e, t, _) {
    var o, l, r;
    d.__ && d.__(e, t), l = (o = typeof _ == "function") ? null : _ && _.__k || t.__k, r = [], I(t, e = (!o && _ || t).__k = oe(W, null, [
        e
    ]), l || N, N, t.ownerSVGElement !== void 0, !o && _ ? [
        _
    ] : l ? null : t.firstChild ? w.call(t.childNodes) : null, r, !o && _ ? _ : l ? l.__e : t.firstChild, o), ee(r, e);
}
w = q.slice, d = {
    __e: function(e, t, _, o) {
        for(var l, r, s; t = t.__;)if ((l = t.__c) && !l.__) try {
            if ((r = l.constructor) && r.getDerivedStateFromError != null && (l.setState(r.getDerivedStateFromError(e)), s = l.__d), l.componentDidCatch != null && (l.componentDidCatch(e, o || {}), s = l.__d), s) return l.__E = l;
        } catch (f) {
            e = f;
        }
        throw e;
    }
}, j = 0, T.prototype.setState = function(e, t) {
    var _;
    _ = this.__s != null && this.__s !== this.state ? this.__s : this.__s = k({}, this.state), typeof e == "function" && (e = e(k({}, _), this.props)), e && k(_, e), e != null && this.__v && (t && this._sb.push(t), H(this));
}, T.prototype.forceUpdate = function(e) {
    this.__v && (this.__e = !0, e && this.__h.push(e), H(this));
}, T.prototype.render = W, b = [], z = typeof Promise == "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, F = function(e, t) {
    return e.__v.__b - t.__v.__b;
}, L.__r = 0, 0;
var i = 0;
function v(n, s, f, a, l, u) {
    var r, o, _ = {};
    for(o in s)o == "ref" ? r = s[o] : _[o] = s[o];
    var t = {
        type: n,
        props: _,
        key: f,
        ref: r,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: --i,
        __source: l,
        __self: u
    };
    if (typeof n == "function" && (r = n.defaultProps)) for(o in r)_[o] === void 0 && (_[o] = r[o]);
    return d.vnode && d.vnode(t), t;
}
var s, o, H1, b1, v1 = 0, x = [], p = [], g = d.__b, A = d.__r, C = d.diffed, F1 = d.__c, q1 = d.unmount;
function l(_, n) {
    d.__h && d.__h(o, _, v1 || n), v1 = 0;
    var u = o.__H || (o.__H = {
        __: [],
        __h: []
    });
    return _ >= u.__.length && u.__.push({
        __V: p
    }), u.__[_];
}
function k1(_) {
    return v1 = 1, B1(U, _);
}
function B1(_, n, u) {
    var t = l(s++, 2);
    if (t.t = _, !t.__c && (t.__ = [
        u ? u(n) : U(void 0, n),
        function(c) {
            var a = t.__N ? t.__N[0] : t.__[0], f = t.t(a, c);
            a !== f && (t.__N = [
                f,
                t.__[1]
            ], t.__c.setState({}));
        }
    ], t.__c = o, !o.u)) {
        var i = function(c, a, f) {
            if (!t.__c.__H) return !0;
            var m = t.__c.__H.__.filter(function(e) {
                return e.__c;
            });
            if (m.every(function(e) {
                return !e.__N;
            })) return !h || h.call(this, c, a, f);
            var V = !1;
            return m.forEach(function(e) {
                if (e.__N) {
                    var P = e.__[0];
                    e.__ = e.__N, e.__N = void 0, P !== e.__[0] && (V = !0);
                }
            }), !(!V && t.__c.props === c) && (!h || h.call(this, c, a, f));
        };
        o.u = !0;
        var h = o.shouldComponentUpdate, N = o.componentWillUpdate;
        o.componentWillUpdate = function(c, a, f) {
            if (this.__e) {
                var m = h;
                h = void 0, i(c, a, f), h = m;
            }
            N && N.call(this, c, a, f);
        }, o.shouldComponentUpdate = i;
    }
    return t.__N || t.__;
}
function j1(_, n) {
    var u = l(s++, 3);
    !d.__s && y(u.__H, n) && (u.__ = _, u.i = n, o.__H.__h.push(u));
}
function T1(_, n) {
    var u = l(s++, 7);
    return y(u.__H, n) ? (u.__V = _(), u.i = n, u.__h = _, u.__V) : u.__;
}
function L1(_, n) {
    return v1 = 8, T1(function() {
        return _;
    }, n);
}
function R1() {
    for(var _; _ = x.shift();)if (_.__P && _.__H) try {
        _.__H.__h.forEach(d1), _.__H.__h.forEach(E), _.__H.__h = [];
    } catch (n) {
        _.__H.__h = [], d.__e(n, _.__v);
    }
}
d.__b = function(_) {
    o = null, g && g(_);
}, d.__r = function(_) {
    A && A(_), s = 0;
    var n = (o = _.__c).__H;
    n && (H1 === o ? (n.__h = [], o.__h = [], n.__.forEach(function(u) {
        u.__N && (u.__ = u.__N), u.__V = p, u.__N = u.i = void 0;
    })) : (n.__h.forEach(d1), n.__h.forEach(E), n.__h = [])), H1 = o;
}, d.diffed = function(_) {
    C && C(_);
    var n = _.__c;
    n && n.__H && (n.__H.__h.length && (x.push(n) !== 1 && b1 === d.requestAnimationFrame || ((b1 = d.requestAnimationFrame) || S1)(R1)), n.__H.__.forEach(function(u) {
        u.i && (u.__H = u.i), u.__V !== p && (u.__ = u.__V), u.i = void 0, u.__V = p;
    })), H1 = o = null;
}, d.__c = function(_, n) {
    n.some(function(u) {
        try {
            u.__h.forEach(d1), u.__h = u.__h.filter(function(t) {
                return !t.__ || E(t);
            });
        } catch (t) {
            n.some(function(i) {
                i.__h && (i.__h = []);
            }), n = [], d.__e(t, u.__v);
        }
    }), F1 && F1(_, n);
}, d.unmount = function(_) {
    q1 && q1(_);
    var n, u = _.__c;
    u && u.__H && (u.__H.__.forEach(function(t) {
        try {
            d1(t);
        } catch (i) {
            n = i;
        }
    }), u.__H = void 0, n && d.__e(n, u.__v));
};
var D = typeof requestAnimationFrame == "function";
function S1(_) {
    var n, u = function() {
        clearTimeout(t), D && cancelAnimationFrame(n), setTimeout(_);
    }, t = setTimeout(u, 100);
    D && (n = requestAnimationFrame(u));
}
function d1(_) {
    var n = o, u = _.__c;
    typeof u == "function" && (_.__c = void 0, u()), o = n;
}
function E(_) {
    var n = o;
    _.__c = _.__(), o = n;
}
function y(_, n) {
    return !_ || _.length !== n.length || n.some(function(u, t) {
        return u !== _[t];
    });
}
function U(_, n) {
    return typeof n == "function" ? n(_) : n;
}
const MS_PER_DAY = 24 * 60 * 60 * 1000;
class Day {
    #date;
    constructor(utcDate){
        this.#date = utcDate;
    }
    get year() {
        return this.#date.getUTCFullYear();
    }
    get month() {
        return this.#date.getUTCMonth() + 1;
    }
    get date() {
        return this.#date.getUTCDate();
    }
    get day() {
        return this.#date.getUTCDay();
    }
    get id() {
        return this.#date.getTime() / MS_PER_DAY;
    }
    get sunday() {
        return this.add(-this.day);
    }
    get valid() {
        return !Number.isNaN(this.#date.getTime());
    }
    add(days) {
        const clone = new Date(this.#date);
        clone.setUTCDate(this.date + days);
        return new Day(clone);
    }
    toLocal() {
        return new Date(this.year, this.month - 1, this.date);
    }
    toString() {
        return this.valid ? [
            this.year.toString().padStart(4, '0'),
            this.month.toString().padStart(2, '0'),
            this.date.toString().padStart(2, '0')
        ].join('-') : 'Invalid date';
    }
    valueOf() {
        return this.id;
    }
    [Symbol.for('Deno.customInspect')]() {
        return this.toString();
    }
    static get EPOCH() {
        return new Day(new Date(0));
    }
    static from(year, month, date) {
        return new Day(new Date(Date.UTC(year, month - 1, date)));
    }
    static today() {
        const today = new Date();
        return Day.from(today.getFullYear(), today.getMonth() + 1, today.getDate());
    }
    static parse(str) {
        const [year, month, date] = str.split('-').map(Number);
        const parsed = Day.from(year, month, date);
        return parsed.valid ? parsed : null;
    }
    static fromId(dayId) {
        return Day.EPOCH.add(dayId);
    }
}
const importMeta = {
    url: "file:///home/sheep/uxdy/terms/index.ts",
    main: false
};
const offset = {
    WI: 0,
    SP: 84,
    S1: 175,
    S2: 210,
    FA: 262
};
const length = {
    FA: 79,
    WI: 75,
    SP: 74,
    S1: 33,
    S2: 33
};
const finalsOffset = {
    FA: 7,
    WI: 7,
    SP: 6,
    S1: 1,
    S2: 1
};
function winterStart(year) {
    const jan1 = Day.from(year, 1, 1);
    return Day.from(year, 1, 9 - jan1.day);
}
function getTermDays(year, season) {
    const start = winterStart(year).add(offset[season]);
    return {
        start,
        finals: start.add(length[season] - finalsOffset[season]),
        end: start.add(length[season])
    };
}
function getTerm(day) {
    const daysSinceWinter = +day - +winterStart(day.year);
    let season = null;
    let current = false;
    for (const term of [
        'WI',
        'SP',
        'S1',
        'S2',
        'FA'
    ]){
        if (daysSinceWinter <= offset[term] + length[term]) {
            season = term;
            current = daysSinceWinter >= offset[term];
            break;
        }
    }
    const year = season === null ? day.year + 1 : day.year;
    season ??= 'WI';
    const finals = current && daysSinceWinter >= offset[season] + length[season] - finalsOffset[season];
    return {
        year,
        season,
        current,
        finals
    };
}
function termCode(year, season) {
    return season + (year % 100).toString().padStart(2, '0');
}
if (importMeta.main) {
    console.log([
        'Start year',
        'Fall start',
        'Fall end',
        'Winter start',
        'Spring end'
    ].join('\t'));
    for(let year = 2005; year <= 2028; year++){
        const { end: springEnd  } = getTermDays(year, 'SP');
        const { start: fallStart , end: fallEnd  } = getTermDays(year, 'FA');
        const { start: winterStart  } = getTermDays(year + 1, 'WI');
        console.log([
            +fallStart - +springEnd,
            +winterStart - +fallEnd
        ].join('\t'));
    }
}
const revelle = {
    BONN: [
        32.876084946774036,
        -117.24038814500676
    ],
    GH: [
        32.87374584111353,
        -117.24092662366324
    ],
    MAYER: [
        32.87528696893803,
        -117.24019479635555
    ],
    'MYR-A': [
        32.87536189399691,
        -117.23970412241734
    ],
    NSB: [
        32.87527130105447,
        -117.24282324774462
    ],
    PACIF: [
        32.87595284128824,
        -117.24210006678864
    ],
    REV: [
        32.87480385710217,
        -117.24096166711239
    ],
    RVCOM: [
        32.87457496393089,
        -117.2425008415767
    ],
    TATA: [
        32.876460769081355,
        -117.24152230144844
    ],
    UREY: [
        32.875555403867246,
        -117.2412962102085
    ],
    YORK: [
        32.87454593562147,
        -117.24000502137861
    ]
};
const muir = {
    APM: [
        32.87900949086575,
        -117.24105009713044
    ],
    BIO: [
        32.878428690703146,
        -117.24103674033825
    ],
    HSS: [
        32.87834508545459,
        -117.24168835799722
    ],
    LEDDN: [
        32.87876783002103,
        -117.24168242455174
    ],
    MANDE: [
        32.877812337766414,
        -117.23998508397895
    ],
    MCGIL: [
        32.87900601797463,
        -117.24205773606351
    ],
    MNDLR: [
        32.87928595670899,
        -117.24214505416418
    ],
    RECGM: [
        32.87672837413399,
        -117.24124478552716
    ]
};
const sixth = {
    CTL: [
        32.880720265920914,
        -117.24142517100402
    ],
    JEANN: [
        32.8799296621332,
        -117.24119652096547
    ],
    MOS: [
        32.88001190738399,
        -117.24163094823878
    ],
    RWAC: [
        32.880374742852574,
        -117.24106684310492
    ]
};
const marshall = {
    CSB: [
        32.880517237245954,
        -117.23939317415764
    ],
    ECON: [
        32.88235588485967,
        -117.24040328432459
    ],
    PETER: [
        32.879984046654364,
        -117.2402525268966
    ],
    SEQUO: [
        32.88203974495475,
        -117.24103633144476
    ],
    SOLIS: [
        32.880935740253626,
        -117.23964750230745
    ],
    SSRB: [
        32.88075657728253,
        -117.240142743495
    ],
    TM102: [
        32.88134401507817,
        -117.23933111579409
    ]
};
const erc = {
    ASANT: [
        32.88423744331073,
        -117.24213984468823
    ],
    ERCA: [
        32.886087113975414,
        -117.24205254723678
    ],
    GREAT: [
        32.883944240936444,
        -117.24193249617227
    ],
    LASB: [
        32.88557327735999,
        -117.2413567320843
    ],
    RBC: [
        32.88427044449085,
        -117.2408680383893
    ],
    SSB: [
        32.88391338508008,
        -117.24045720071513
    ]
};
const seventh = {
    OTRSN: [
        32.88665760836001,
        -117.24102406579628
    ],
    SEVW2: [
        32.8880285561251,
        -117.24255222849888
    ],
    SEVE3: [
        32.88825009555447,
        -117.24173440393453
    ],
    SEVE4: [
        32.88807303667593,
        -117.2417902045747
    ],
    WFH: [
        32.886967814911024,
        -117.24173638805067
    ]
};
const warren = {
    EBU1: [
        32.88168612813114,
        -117.2352758424052
    ],
    EBU2: [
        32.88116494369773,
        -117.23334050065942
    ],
    EBU3B: [
        32.8817383470234,
        -117.23358830529953
    ],
    FAH: [
        32.883557123107536,
        -117.23496426482438
    ],
    PFBH: [
        32.88173836638747,
        -117.2343791731388
    ],
    WARR: [
        32.88114818094256,
        -117.23504265009306
    ],
    WLH: [
        32.88059104682919,
        -117.23436049332548
    ],
    WSAC: [
        32.88246082957613,
        -117.23329893891902
    ]
};
const pepperCanyon = {
    DIB: [
        32.87937650181871,
        -117.23229157766367
    ],
    PCYNH: [
        32.878341870703316,
        -117.23391147692307
    ],
    SME: [
        32.879887628129154,
        -117.23275634017203
    ],
    VAF: [
        32.879139240878324,
        -117.23396876625009
    ]
};
const universityCenter = {
    CENTR: [
        32.87797399985619,
        -117.237243418587
    ],
    CSC: [
        32.87840034888087,
        -117.23791254127356
    ],
    CPMC: [
        32.87808507377693,
        -117.23466682590514
    ],
    P416: [
        32.87775532737337,
        -117.23812995691154
    ],
    PRICE: [
        32.879954671864304,
        -117.23711807270978
    ],
    SERF: [
        32.87969838069206,
        -117.23507094146997
    ],
    U201: [
        32.87750663014029,
        -117.23672981527089
    ],
    U301: [
        32.87773977889938,
        -117.23584205327144
    ]
};
const med = {
    BRF2: [
        32.874320265698685,
        -117.2350725903077
    ],
    BSB: [
        32.87583620115867,
        -117.23610217780087
    ],
    CMME: [
        32.876369320524,
        -117.23767828382417
    ],
    CNCB: [
        32.87569310599253,
        -117.23819914713752
    ],
    KECK: [
        32.87504438926279,
        -117.23617314958287
    ],
    LFFB: [
        32.87668499513593,
        -117.23686452737942
    ],
    MET: [
        32.875220419083554,
        -117.23478623990438
    ],
    MTF: [
        32.87559622253949,
        -117.23543639784786
    ],
    PSB: [
        32.874209066736114,
        -117.23571795183558
    ],
    SCRB: [
        32.8758549279704,
        -117.23394815633426
    ]
};
const health = {
    MCC: [
        32.87832294065095,
        -117.22294309501584
    ]
};
const playhouse = {
    DANCE: [
        32.87186729617818,
        -117.24003377110412
    ],
    MWEIS: [
        32.87095079844769,
        -117.24121579783444
    ],
    POTKR: [
        32.87110810161448,
        -117.24052277636109
    ]
};
const sio = {
    ECKRT: [
        32.8672217685922,
        -117.25258463073409
    ],
    HUBBS: [
        32.86744021132684,
        -117.25344551951103
    ],
    HYDRO: [
        32.86889985285985,
        -117.25226455555327
    ],
    IGPP: [
        32.86830699100889,
        -117.25287278628777
    ],
    NIERN: [
        32.86846701354387,
        -117.25120611888595
    ],
    OAR: [
        32.86949599612524,
        -117.25063208743448
    ],
    RITTR: [
        32.86529347606621,
        -117.25357019529167
    ],
    SPIES: [
        32.86909245015263,
        -117.25095900205372
    ],
    SUMNR: [
        32.86488587494083,
        -117.2529119246211
    ],
    VAUGN: [
        32.86531011859729,
        -117.25300219413253
    ]
};
const locations = {
    ...revelle,
    ...muir,
    ...sixth,
    ...marshall,
    ...erc,
    ...seventh,
    ...warren,
    ...pepperCanyon,
    ...universityCenter,
    ...med,
    ...health,
    ...playhouse,
    ...sio
};
function locationToCollegeMapping(college, collegeName) {
    return Object.fromEntries(Object.keys(college).map((building)=>[
            building,
            collegeName
        ]));
}
const colleges = {
    ...locationToCollegeMapping(revelle, 'revelle'),
    ...locationToCollegeMapping(muir, 'muir'),
    ...locationToCollegeMapping(sixth, 'sixth'),
    ...locationToCollegeMapping(marshall, 'marshall'),
    ...locationToCollegeMapping(erc, 'erc'),
    ...locationToCollegeMapping(seventh, 'seventh'),
    ...locationToCollegeMapping(warren, 'warren'),
    ...locationToCollegeMapping(pepperCanyon, 'pepperCanyon'),
    ...locationToCollegeMapping(universityCenter, 'universityCenter'),
    ...locationToCollegeMapping(med, 'med'),
    ...locationToCollegeMapping(health, 'health'),
    ...locationToCollegeMapping(playhouse, 'playhouse'),
    ...locationToCollegeMapping(sio, 'sio')
};
const TILE_LEFT = -6;
const SCALE = 2 ** (7 + 17) * 1.5;
function latLongToPixel([latitude, longitude]) {
    return {
        x: SCALE * (longitude / 180 + 1),
        y: -SCALE * (Math.log(Math.tan(Math.PI / 4 + latitude * Math.PI / 360)) / Math.PI + 1)
    };
}
const coords = Object.values(locations);
function getExtremeCoord(index, max) {
    return coords.reduce((acc, curr)=>(max ? Math.max : Math.min)(acc, curr[index]), max ? -Infinity : Infinity);
}
const southwest = latLongToPixel([
    getExtremeCoord(0, false),
    getExtremeCoord(1, false)
]);
const northeast = latLongToPixel([
    getExtremeCoord(0, true),
    getExtremeCoord(1, true)
]);
const MAP_TILE_SIZE = 256 * 1.5;
const center = latLongToPixel([
    32.877341347399,
    -117.23531663418
]);
const mapPosition = {
    x: Math.floor(center.x / MAP_TILE_SIZE + TILE_LEFT) * MAP_TILE_SIZE - (southwest.x - 50),
    y: Math.floor(center.y / MAP_TILE_SIZE - 4) * MAP_TILE_SIZE - (northeast.y - 50),
    width: (5 - TILE_LEFT + 1) * MAP_TILE_SIZE
};
class Time {
    hour;
    minute;
    constructor(hour, minute){
        this.hour = hour;
        this.minute = minute;
    }
    toString() {
        return `${(this.hour + 11) % 12 + 1}:${this.minute.toString().padStart(2, '0')} ${this.hour < 12 ? 'a' : 'p'}m`;
    }
    valueOf() {
        return this.hour * 60 + this.minute;
    }
    static from(minutes) {
        return new Time(Math.floor(minutes / 60), minutes % 60);
    }
}
function getNow() {
    const now = new Date();
    return {
        day: now.getDay(),
        time: new Time(now.getHours(), now.getMinutes())
    };
}
function used({ day , time  }, includeBefore = 0) {
    return (meeting)=>{
        return meeting.days.includes(day) && +meeting.start - includeBefore <= +time && time < meeting.end;
    };
}
function useNow() {
    const [now, setNow] = k1(()=>getNow());
    j1(()=>{
        const intervalId = setInterval(()=>{
            setNow((now)=>{
                const newNow = getNow();
                return now.day === newNow.day && +now.time === +newNow.time ? now : newNow;
            });
        }, 1000);
        return ()=>{
            clearInterval(intervalId);
        };
    }, []);
    return now;
}
function Building({ now , building , onSelect , scrollWrapper , selected  }) {
    if (!locations[building.name]) {
        return v("p", {
            children: [
                "No location data for ",
                building.name
            ]
        });
    }
    const college = colleges[building.name];
    const ref = L1((button)=>{
        if (building.name === 'CENTR' && button) {
            window.requestAnimationFrame(()=>{
                const { left , top , width , height  } = button.getBoundingClientRect();
                scrollWrapper.scrollBy(left + (-window.innerWidth + width) / 2, top + (-window.innerHeight + height) / 2);
            });
        }
    }, []);
    const { x , y  } = latLongToPixel(locations[building.name]);
    return v("button", {
        class: `building college-${college} ${selected ? 'selected' : ''}`,
        style: {
            left: `${x - southwest.x + 50}px`,
            top: `${y - northeast.y + 50}px`
        },
        ref: ref,
        onClick: ()=>onSelect(building),
        children: [
            building.name,
            v("span", {
                class: "room-count",
                children: [
                    now && v(W, {
                        children: [
                            v("span", {
                                class: "in-use",
                                children: Object.values(building.rooms).filter((meetings)=>meetings.some(used(now))).length
                            }),
                            "/"
                        ]
                    }),
                    Object.values(building.rooms).length
                ]
            })
        ]
    });
}
function InfoPanel({ quarter , onQuarter , class: className = '' , quarters  }) {
    return v("div", {
        class: `info-panel ${className}`,
        children: [
            v("h1", {
                class: "title",
                children: [
                    "UCSD classroom schedules",
                    ' ',
                    v("span", {
                        class: "subtitle",
                        children: [
                            "for",
                            ' ',
                            v("select", {
                                class: "quarter",
                                value: quarter ?? 'current',
                                onChange: (e)=>onQuarter(e.currentTarget.value === 'current' ? null : e.currentTarget.value),
                                children: [
                                    v("option", {
                                        value: "current",
                                        children: "Current quarter"
                                    }),
                                    Object.entries(quarters).map(([code, name])=>v("option", {
                                            value: code,
                                            children: name
                                        }, code))
                                ]
                            })
                        ]
                    })
                ]
            }),
            v("p", {
                class: "instructions",
                children: [
                    "Select a building to view its rooms.",
                    ' ',
                    v("a", {
                        href: "https://github.com/SheepTester/uxdy/tree/main/webreg-scraping/classrooms",
                        class: "link",
                        children: "Github"
                    })
                ]
            })
        ]
    });
}
const exams = {
    FI: 'Final Exam',
    MI: 'Midterm',
    FM: 'Film Sessions',
    PB: 'Problem Sessions',
    OT: 'Other Sessions',
    RE: 'Review Sessions',
    MU: 'Make-up Sessions'
};
const instructionTypes = {
    LE: 'Lecture',
    DI: 'Discussion',
    LA: 'Lab',
    IN: 'Independent Study',
    SE: 'Seminar',
    AC: 'Activity',
    CL: 'Clinical Clerkship',
    CN: 'Clinic',
    CO: 'Conference',
    FW: 'Fieldwork',
    IT: 'Internship',
    OP: 'Outside Preparation',
    PR: 'Practicum',
    SA: 'Study Abroad',
    SI: 'Simultaneous Enrlmnt-Other UC',
    ST: 'Studio',
    TU: 'Tutorial',
    OT: 'Other Sessions'
};
const meetingTypes = {
    ...exams,
    ...instructionTypes
};
const importMeta1 = {
    url: "file:///home/sheep/uxdy/classrooms/from-file.ts",
    main: false
};
class StringTaker {
    #string;
    #index = 0;
    constructor(string){
        this.#string = string;
    }
    discard(chars) {
        this.#index += chars;
        return null;
    }
    take(chars) {
        this.#index += chars;
        return this.#string.slice(this.#index - chars, this.#index).trim();
    }
    takeInt(chars) {
        return +this.take(chars);
    }
    takeRest() {
        return this.#string.slice(this.#index);
    }
    #takeMinutes() {
        const time = this.take(4);
        return +time.slice(0, 2) * 60 + +time.slice(2);
    }
    takeMeeting(day = null) {
        const building = this.take(5);
        const days = day === null ? this.take(5) : String(day);
        return {
            type: this.take(2),
            location: building === 'TBA' ? this.discard(5) : {
                building,
                room: this.take(5)
            },
            time: days !== 'TBA' ? {
                days: Array.from(days, Number),
                start: this.#takeMinutes(),
                end: this.#takeMinutes()
            } : this.discard(8)
        };
    }
    hasMore() {
        return this.#index < this.#string.length;
    }
}
function coursesFromFile(file) {
    const courses = [];
    const state = [];
    const lines = file.trim().split(/\r?\n/);
    if (lines.shift() !== 'V2') {
        throw new SyntaxError("I don't understand the format the courses are in.");
    }
    for (const line of lines){
        const taker = new StringTaker(line);
        if (line.startsWith('\t')) {
            taker.discard(1);
            const course = courses[courses.length - 1];
            const group = course.groups[course.groups.length - 1];
            const nextState = state.shift();
            if (nextState === 'sections') {
                while(taker.hasMore()){
                    const capacity = taker.takeInt(4);
                    group.sections.push({
                        code: taker.take(3),
                        capacity: capacity === 9999 ? Infinity : capacity,
                        ...taker.takeMeeting()
                    });
                }
            } else if (nextState === 'meetings') {
                while(taker.hasMore()){
                    group.meetings.push(taker.takeMeeting());
                }
            } else if (nextState === 'exams') {
                while(taker.hasMore()){
                    const date = new Date(Date.UTC(taker.takeInt(4), taker.takeInt(2) - 1, taker.takeInt(2)));
                    group.exams.push({
                        date,
                        ...taker.takeMeeting(date.getUTCDay())
                    });
                }
            } else {
                const additionalMeetings = taker.takeInt(1);
                state.push('sections');
                if (additionalMeetings & 0b10) {
                    state.push('meetings');
                }
                if (additionalMeetings & 0b01) {
                    state.push('exams');
                }
                course.groups.push({
                    code: taker.take(3),
                    instructors: taker.takeRest().split('\t').map((name)=>{
                        const [first, last] = name.split(',');
                        return [
                            first,
                            last
                        ];
                    }),
                    sections: [],
                    meetings: [],
                    exams: []
                });
            }
        } else {
            courses.push({
                code: [
                    taker.take(4),
                    taker.take(5)
                ].join(' '),
                title: taker.takeRest(),
                groups: []
            });
        }
    }
    return courses;
}
function compareRoomNums(a, b) {
    const aBasement = a.startsWith('B');
    const bBasement = b.startsWith('B');
    if (aBasement !== bBasement) {
        return aBasement ? -1 : 1;
    } else {
        return aBasement ? b.localeCompare(a) : a.localeCompare(b);
    }
}
function coursesToClassrooms(courses) {
    const buildings = {};
    for (const [i, { code , groups  }] of courses.entries()){
        for (const [j, { sections , meetings , exams  }] of groups.entries()){
            const groupCapacity = sections.reduce((cum, curr)=>cum + curr.capacity, 0);
            const allMeetings = [
                ...sections,
                ...meetings,
                ...exams
            ];
            for (const meeting of allMeetings){
                const { location , time  } = meeting;
                if (!time || !location || location.building === 'RCLAS') {
                    continue;
                }
                buildings[location.building] ??= {
                    name: location.building,
                    rooms: {}
                };
                buildings[location.building].rooms[location.room] ??= [];
                buildings[location.building].rooms[location.room].push({
                    ...meeting,
                    days: time.days,
                    start: Time.from(time.start),
                    end: Time.from(time.end),
                    capacity: 'capacity' in meeting ? meeting.capacity : groupCapacity,
                    course: code,
                    index: {
                        group: i,
                        meeting: j,
                        type: 'capacity' in meeting ? 'section' : 'date' in meeting ? 'exam' : 'meeting'
                    }
                });
            }
        }
    }
    return Object.values(buildings);
}
if (importMeta1.main) {
    console.log(coursesFromFile(await Deno.readTextFile(Deno.args[0]))[100]);
}
function BackIcon() {
    return v("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        class: "back-icon",
        children: v("path", {
            d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
        })
    });
}
function CloseIcon() {
    return v("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        class: "close-icon",
        children: v("path", {
            d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
        })
    });
}
const DAYS = [
    7,
    1,
    2,
    3,
    4,
    5,
    6
];
const WEEKDAYS = [
    1,
    2,
    3,
    4,
    5
];
const DAY_NAMES = [
    '',
    'Mon',
    'Tues',
    'Wed',
    'Thurs',
    'Fri',
    'Sat',
    'Sun'
];
function Schedule({ now , meetings  }) {
    const [day, setDay] = k1(null);
    const currentMeetings = meetings.filter((meeting)=>!('date' in meeting));
    if (currentMeetings.length === 0) {
        return v("div", {
            class: "schedule finals-only",
            children: v("p", {
                children: "This room is only used during finals."
            })
        });
    }
    const hasWeekend = currentMeetings.some((meeting)=>meeting.days.includes(6) || meeting.days.includes(7));
    const earliest = currentMeetings.reduce((acc, curr)=>Math.min(acc, +curr.start), Infinity);
    const latest = currentMeetings.reduce((acc, curr)=>Math.max(acc, +curr.end), -Infinity);
    return v("div", {
        class: "schedule",
        children: [
            v("div", {
                class: "day-names",
                children: (hasWeekend ? DAYS : WEEKDAYS).map((weekDay)=>v("button", {
                        class: `day day-name ${weekDay === day ? 'selected-day' : ''}`,
                        onClick: ()=>setDay((day)=>weekDay === day ? null : weekDay),
                        children: DAY_NAMES[weekDay]
                    }, weekDay))
            }),
            v("div", {
                class: "gradient gradient-top"
            }),
            v("div", {
                class: `meetings-wrapper ${day === null ? 'full-week' : ''}`,
                children: (day !== null ? [
                    day
                ] : hasWeekend ? DAYS : WEEKDAYS).map((day)=>v("div", {
                        class: "day meetings",
                        style: {
                            height: `${(latest - earliest) / 1}px`
                        },
                        children: [
                            currentMeetings.filter((meeting)=>meeting.days.includes(day) && !('date' in meeting)).map((meeting)=>v("div", {
                                    class: `meeting ${now?.day === day && meeting.start <= now.time && now.time < meeting.end ? 'current' : ''}`,
                                    style: {
                                        top: `${(+meeting.start - earliest) / 1}px`,
                                        height: `${(+meeting.end - +meeting.start) / 1}px`
                                    },
                                    children: [
                                        v("div", {
                                            class: "meeting-name",
                                            children: [
                                                meeting.course,
                                                " (",
                                                v("abbr", {
                                                    title: meetingTypes[meeting.type],
                                                    children: meeting.type
                                                }),
                                                ")"
                                            ]
                                        }),
                                        v("div", {
                                            class: "meeting-time",
                                            children: [
                                                meeting.start.toString(),
                                                "–",
                                                meeting.end.toString()
                                            ]
                                        })
                                    ]
                                })),
                            now?.day === day && earliest <= +now.time && +now.time < latest && v("div", {
                                class: "now",
                                style: {
                                    top: `${(+now.time - earliest) / 1}px`
                                }
                            })
                        ]
                    }, day))
            }),
            v("div", {
                class: "gradient gradient-bottom"
            }),
            v("p", {
                class: "disclaimer",
                children: "Note: some classes book rooms but don't meet."
            })
        ]
    });
}
function RoomList({ now , building , onClose , class: className = ''  }) {
    const [selected, setSelected] = k1(null);
    return v("div", {
        class: `room-list ${className}`,
        children: [
            v("h2", {
                class: "building-name",
                children: [
                    v("button", {
                        class: "back",
                        onClick: ()=>setSelected(null),
                        disabled: !selected,
                        children: v(BackIcon, {})
                    }),
                    v("div", {
                        class: `building-gradient college-${colleges[building.name]}`
                    }),
                    building.name,
                    " ",
                    selected,
                    v("button", {
                        class: "close",
                        onClick: onClose,
                        children: v(CloseIcon, {})
                    })
                ]
            }),
            selected ? v(Schedule, {
                now: now,
                meetings: building.rooms[selected]
            }) : v("div", {
                class: "rooms",
                children: Object.entries(building.rooms).sort(([a], [b])=>compareRoomNums(a, b)).map(([room, meetings])=>{
                    const activeMeeting = now && meetings.find(used(now, 10));
                    const soon = activeMeeting && now.time < activeMeeting.start;
                    return v("button", {
                        class: `room ${activeMeeting ? soon ? 'soon' : 'active' : ''}`,
                        onClick: ()=>setSelected(room),
                        children: [
                            v("div", {
                                className: "room-name",
                                children: [
                                    building.name,
                                    " ",
                                    room
                                ]
                            }),
                            now && v("div", {
                                className: "current-meeting",
                                children: activeMeeting ? v(W, {
                                    children: [
                                        activeMeeting.course,
                                        ' ',
                                        soon ? 'soon' : v(W, {
                                            children: [
                                                "(",
                                                v("abbr", {
                                                    title: meetingTypes[activeMeeting.type],
                                                    children: activeMeeting.type
                                                }),
                                                ")"
                                            ]
                                        })
                                    ]
                                }) : 'Not in use'
                            })
                        ]
                    });
                })
            })
        ]
    });
}
function currentQuarter() {
    const { year , season  } = getTerm(Day.today());
    return termCode(year, season);
}
function App() {
    const [quarter, setQuarter] = k1(()=>null);
    const [buildings, setBuildings] = k1(null);
    const [viewing, setViewing] = k1(null);
    const now = useNow();
    const [scrollWrapper, setScrollWrapper] = k1(null);
    j1(()=>{
        fetch(`./classrooms-${quarter ?? currentQuarter()}.txt`).then((r)=>r.ok ? r.text() : Promise.reject(new Error(`HTTP ${r.status} error`))).then(coursesFromFile).then(coursesToClassrooms).then(setBuildings).catch((err)=>{
            if (err instanceof SyntaxError) {
                window.location.reload();
            }
        });
    }, [
        quarter
    ]);
    return buildings ? v(W, {
        children: [
            v("div", {
                class: "buildings",
                ref: scrollWrapper ? undefined : setScrollWrapper,
                children: [
                    v("div", {
                        class: "scroll-area",
                        style: {
                            width: `${northeast.x - southwest.x + 50 * 2}px`,
                            height: `${southwest.y - northeast.y + 50 * 2}px`,
                            backgroundSize: `${mapPosition.width}px`,
                            backgroundPosition: `${mapPosition.x}px ${mapPosition.y}px`
                        }
                    }),
                    scrollWrapper && buildings.map((building)=>v(Building, {
                            now: quarter ? null : now,
                            building: building,
                            onSelect: setViewing,
                            scrollWrapper: scrollWrapper,
                            selected: building === viewing
                        }, building.name))
                ]
            }),
            v("div", {
                class: `panel ${viewing ? 'has-rooms' : 'has-info'}`,
                children: viewing ? v(RoomList, {
                    now: quarter ? null : now,
                    building: viewing,
                    onClose: ()=>setViewing(null),
                    class: "panel-contents"
                }, viewing.name) : v(InfoPanel, {
                    quarter: quarter,
                    onQuarter: setQuarter,
                    class: "panel-contents",
                    quarters: {
                        WI23: 'Winter 2023',
                        SP23: 'Spring 2023'
                    }
                })
            })
        ]
    }) : v("p", {
        children: "Loading..."
    });
}
ce(v(App, {}), document.getElementById('root'));
